import json
import joblib
import random
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_dialogues(filename="dialogues.txt"):
    dialogues = {}
    with open(filename, "r", encoding="utf-8") as file:
        current_section = None
        for line in file:
            line = line.strip()
            if line.startswith("[") and line.endswith("]"):
                current_section = line[1:-1]
                dialogues[current_section] = []
            elif line and current_section:
                dialogues[current_section].append(line)
    return dialogues

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ML (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
try:
    model = joblib.load("intent_model.pkl")
    vectorizer = joblib.load("vectorizer.pkl")
    ml_enabled = True
    print("ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    ml_enabled = False
    print(f"ML –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
dialogues = load_dialogues()

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
with open("intents.json", "r", encoding="utf-8") as file:
    intents_data = json.load(file)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å —Ü–µ–Ω–∞–º–∏
product_categories = {
    "1": {
        "name": "–ö–∞—Ä–∞–Ω–¥–∞—à–∏, —Ä—É—á–∫–∏ –∏ –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏",
        "products": {
            "1": {"name": "–°–∏–Ω—è—è/—á–µ—Ä–Ω–∞—è –≥–µ–ª–µ–≤–∞—è —Ä—É—á–∫–∞", "price": 15, "description": "–ì–µ–ª–µ–≤–∞—è —Ä—É—á–∫–∞, –ø–∏—à–µ—Ç –º—è–≥–∫–æ –∏ —á–µ—Ç–∫–æ"},
            "2": {"name": "–ù–∞–±–æ—Ä –≥–µ–ª–µ–≤—ã—Ö —Ä—É—á–µ–∫", "price": 120, "description": "–ù–∞–±–æ—Ä –∏–∑ 8 –≥–µ–ª–µ–≤—ã—Ö —Ä—É—á–µ–∫ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤"},
            "3": {"name": "–°–∏–Ω—è—è/—á–µ—Ä–Ω–∞—è —à–∞—Ä–∏–∫–æ–≤–∞—è —Ä—É—á–∫–∞", "price": 10, "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —à–∞—Ä–∏–∫–æ–≤–∞—è —Ä—É—á–∫–∞"},
            "4": {"name": "–ù–∞–±–æ—Ä —à–∞—Ä–∏–∫–æ–≤—ã—Ö —Ä—É—á–µ–∫", "price": 80, "description": "–ù–∞–±–æ—Ä –∏–∑ 10 —à–∞—Ä–∏–∫–æ–≤—ã—Ö —Ä—É—á–µ–∫"},
            "5": {"name": "–ù–∞–±–æ—Ä —Ü–≤–µ—Ç–Ω—ã—Ö —Ä—É—á–µ–∫", "price": 150, "description": "–ù–∞–±–æ—Ä –∏–∑ 12 —Ü–≤–µ—Ç–Ω—ã—Ö –≥–µ–ª–µ–≤—ã—Ö —Ä—É—á–µ–∫"},
            "6": {"name": "–ü—Ä–æ—Å—Ç–æ–π –∫–∞—Ä–∞–Ω–¥–∞—à", "price": 5, "description": "–ì—Ä–∞—Ñ–∏—Ç–æ–≤—ã–π –∫–∞—Ä–∞–Ω–¥–∞—à —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏ HB"},
            "7": {"name": "–ù–∞–±–æ—Ä —Ü–≤–µ—Ç–Ω—ã—Ö –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π", "price": 200, "description": "–ù–∞–±–æ—Ä –∏–∑ 24 —Ü–≤–µ—Ç–Ω—ã—Ö –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π"},
            "8": {"name": "–ù–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã–¥–µ–ª–∏—Ç–µ–ª–µ–π", "price": 90, "description": "–ù–∞–±–æ—Ä –∏–∑ 5 –Ω–µ–æ–Ω–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã–¥–µ–ª–∏—Ç–µ–ª–µ–π"},
            "9": {"name": "–õ–∞—Å—Ç–∏–∫", "price": 8, "description": "–ú—è–≥–∫–∏–π –ª–∞—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ä–∞–Ω–¥–∞—à–∞"},
            "10": {"name": "–¢–æ—á–∏–ª–∫–∞", "price": 12, "description": "–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è —Ç–æ—á–∏–ª–∫–∞ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º"}
        }
    },
    "2": {
        "name": "–î–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞",
        "products": {
            "1": {"name": "–ê–∫–≤–∞—Ä–µ–ª—å", "price": 180, "description": "–ù–∞–±–æ—Ä –∞–∫–≤–∞—Ä–µ–ª—å–Ω—ã—Ö –∫—Ä–∞—Å–æ–∫, 12 —Ü–≤–µ—Ç–æ–≤"},
            "2": {"name": "–ì—É–∞—à—å", "price": 220, "description": "–ù–∞–±–æ—Ä –≥—É–∞—à–µ–≤—ã—Ö –∫—Ä–∞—Å–æ–∫, 9 —Ü–≤–µ—Ç–æ–≤"},
            "3": {"name": "–ù–∞–±–æ—Ä –∫–∏—Å—Ç–æ—á–µ–∫", "price": 150, "description": "–ù–∞–±–æ—Ä –∫–∏—Å—Ç–µ–π —Ä–∞–∑–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã, 5 —à—Ç—É–∫"},
            "4": {"name": "–ü–∞–ª–∏—Ç—Ä–∞", "price": 25, "description": "–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è –∫—Ä–∞—Å–æ–∫"}
        }
    },
    "3": {
        "name": "–ë—É–º–∞–≥–∞, —Ç–µ—Ç—Ä–∞–¥–∏ –∏ –±–ª–æ–∫–Ω–æ—Ç—ã",
        "products": {
            "1": {"name": "–¢–µ—Ç—Ä–∞–¥—å –≤ –∫–ª–µ—Ç–∫—É", "price": 50, "description": "–¢–µ—Ç—Ä–∞–¥—å 48 –ª–∏—Å—Ç–æ–≤, –∫–ª–µ—Ç–∫–∞"},
            "2": {"name": "–¢–µ—Ç—Ä–∞–¥—å –≤ –ª–∏–Ω–µ–π–∫—É", "price": 50, "description": "–¢–µ—Ç—Ä–∞–¥—å 48 –ª–∏—Å—Ç–æ–≤, –ª–∏–Ω–µ–π–∫–∞"},
            "3": {"name": "–¢–µ—Ç—Ä–∞–¥—å –Ω–∞ –∫–æ–ª—å—Ü–∞—Ö", "price": 120, "description": "–¢–µ—Ç—Ä–∞–¥—å –Ω–∞ –∫–æ–ª—å—Ü–∞—Ö, 120 –ª–∏—Å—Ç–æ–≤"},
            "4": {"name": "–ë–ª–æ–∫–Ω–æ—Ç", "price": 80, "description": "–ë–ª–æ–∫–Ω–æ—Ç –ê5, 80 –ª–∏—Å—Ç–æ–≤"},
            "5": {"name": "–ë—É–º–∞–≥–∞ –±–µ–ª–∞—è –ê4", "price": 180, "description": "–ü–∞—á–∫–∞ –±—É–º–∞–≥–∏ –ê4, 500 –ª–∏—Å—Ç–æ–≤"},
            "6": {"name": "–ë—É–º–∞–≥–∞ —Ü–≤–µ—Ç–Ω–∞—è", "price": 95, "description": "–ù–∞–±–æ—Ä —Ü–≤–µ—Ç–Ω–æ–π –±—É–º–∞–≥–∏, 16 –ª–∏—Å—Ç–æ–≤"},
            "7": {"name": "–ö–∞—Ä—Ç–æ–Ω", "price": 60, "description": "–ù–∞–±–æ—Ä —Ü–≤–µ—Ç–Ω–æ–≥–æ –∫–∞—Ä—Ç–æ–Ω–∞, 8 –ª–∏—Å—Ç–æ–≤"}
        }
    },
    "4": {
        "name": "–ò–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "products": {
            "1": {"name": "–ö–æ—Ä—Ä–µ–∫—Ç–æ—Ä", "price": 35, "description": "–ö–æ—Ä—Ä–µ–∫—Ç–æ—Ä-–ª–µ–Ω—Ç–∞, 5–º–º"},
            "2": {"name": "–°–∫–æ—Ç—á", "price": 25, "description": "–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–∫–æ—Ç—á, 1—Å–º —Ö 33–º"},
            "3": {"name": "–õ–∏–Ω–µ–π–∫–∞", "price": 15, "description": "–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞ 20—Å–º"},
            "4": {"name": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä", "price": 20, "description": "–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä 180¬∞"},
            "5": {"name": "–¶–∏—Ä–∫—É–ª—å", "price": 45, "description": "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —Ü–∏—Ä–∫—É–ª—å —Å –≥—Ä–∏—Ñ–µ–ª–µ–º"},
            "6": {"name": "–ö–ª–µ–π", "price": 30, "description": "–ö–ª–µ–π-–∫–∞—Ä–∞–Ω–¥–∞—à 21–≥"}
        }
    }
}

# –ù–æ–≤—ã–µ —à—É—Ç–∫–∏ –¥–ª—è –±–æ—Ç–∞
jokes = [
    "–ü–æ—á–µ–º—É –∫–∞—Ä–∞–Ω–¥–∞—à —Ä–µ—à–∏–ª —Å—Ç–∞—Ç—å —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –±—ã–ª–æ –æ—Å—Ç—Ä–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞! ‚úèÔ∏è",
    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –æ–¥–∏–Ω –º–∞—Ä–∫–µ—Ä –¥—Ä—É–≥–æ–º—É? '–¢—ã —Ç–∞–∫–æ–π —è—Ä–∫–∏–π, —á—Ç–æ —è —Ç–µ–±—è –Ω–µ –ø–µ—Ä–µ–≤–∞—Ä–∏–≤–∞—é!' üé®",
    "–ü–æ—á–µ–º—É —Ç–µ—Ç—Ä–∞–¥—å –ø–æ—à–ª–∞ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–µ –±—ã–ª–∏ —Å–ª–æ–∂–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª–∏—Å—Ç–∞–º–∏! üìì",
    "–ö–∞–∫ –ª–∞—Å—Ç–∏–∫ –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–≤–æ–∏ –Ω–µ—É–¥–∞—á–∏? '–Ø –ø—Ä–æ—Å—Ç–æ —Å—Ç–∏—Ä–∞—é—Å—å –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏!' üßº",
    "–ü–æ—á–µ–º—É —Å—Ç–µ–ø–ª–µ—Ä —Ç–∞–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω—ã–π –≤ —Å–µ–±–µ? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –≤—Å–µ–≥–¥–∞ —Å–∫—Ä–µ–ø–ª—è–µ—Ç —Å–¥–µ–ª–∞–Ω–Ω–æ–µ! üìé",
    "–ß—Ç–æ —Ä—É—á–∫–∞ —Å–∫–∞–∑–∞–ª–∞ –∫–∞—Ä–∞–Ω–¥–∞—à—É? '–¢–≤–æ–∏ —à—É—Ç–∫–∏ —Ç–∞–∫–∏–µ –æ—Å—Ç—Ä—ã–µ, —á—Ç–æ —è —Å–∏–Ω–µ—é –æ—Ç —Å–º–µ—Ö–∞!' ‚úèÔ∏è",
    "–ü–æ—á–µ–º—É –ª–∏–Ω–µ–π–∫–∞ —Ç–∞–∫–∞—è –ø—Ä—è–º–∞—è? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ –Ω–µ —É–º–µ–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è –æ—Ç —Ç–µ–º—ã! üìè",
    "–ö–∞–∫ –Ω–æ–∂–Ω–∏—Ü—ã —Ä–µ—à–∞—é—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã? –û–Ω–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞—é—Ç –∏—Ö –ø–æ–ø–æ–ª–∞–º! ‚úÇÔ∏è",
    "–ü–æ—á–µ–º—É –∫–ª–µ–π —Ç–∞–∫–æ–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω —É–º–µ–µ—Ç –Ω–∞–ª–∞–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã! üß¥",
    "–ß—Ç–æ –±–ª–æ–∫–Ω–æ—Ç —Å–∫–∞–∑–∞–ª —Å–≤–æ–µ–º—É —Ö–æ–∑—è–∏–Ω—É? '–Ø –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π!' üìî",
    "–ü–æ—á–µ–º—É —Å–∫—Ä–µ–ø–∫–∞ –Ω–µ –ø–æ—à–ª–∞ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ –±–æ—è–ª–∞—Å—å —Ä–∞–∑–æ–π—Ç–∏—Å—å! üìé",
    "–ö–∞–∫ —Ü–∏—Ä–∫—É–ª—å –Ω–∞—Ö–æ–¥–∏—Ç –¥—Ä—É–∑–µ–π? –û–Ω –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–æ–∫—Ä—É–≥ —Å–µ–±—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å! üìê",
    "–ü–æ—á–µ–º—É –¥—ã—Ä–æ–∫–æ–ª –≤—Å–µ–≥–¥–∞ –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –≤ –∏–Ω–æ–º —Å–≤–µ—Ç–µ! üï≥Ô∏è",
    "–ß—Ç–æ –ø–∞–ø–∫–∞ —Å–∫–∞–∑–∞–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º? '–†–µ–±—è—Ç–∞, –¥–∞–≤–∞–π—Ç–µ –¥–µ—Ä–∂–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ!' üìÅ",
    "–ü–æ—á–µ–º—É –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä —Ç–∞–∫–æ–π —Å–∫—Ä–æ–º–Ω—ã–π? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –Ω–µ –ª—é–±–∏—Ç –≤—ã–¥–µ–ª—è—Ç—å—Å—è! üñçÔ∏è"
]

# –¢–µ–º—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
conversation_flows = {
    "—Ä–∞–±–æ—Ç–∞_—É—á–µ–±–∞": [
        "–ö–∞–∫ —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –≤ —É—á—ë–±–µ/—Ä–∞–±–æ—Ç–µ?",
        "–ê —á—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
        "–°–ª–æ–∂–Ω–æ –ª–∏ —Ç–µ–±–µ –¥–∞–µ—Ç—Å—è —É—á–µ–±–∞/—Ä–∞–±–æ—Ç–∞? –ö–∞–∫ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è?"
    ],
    "—Ö–æ–±–±–∏": [
        "–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?",
        "–ê –∫–∞–∫ –¥–∞–≤–Ω–æ —Ç—ã —ç—Ç–∏–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?",
        "–¢–≤–æ–∏ —Ö–æ–±–±–∏ –∫–∞–∫-—Ç–æ —Å–≤—è–∑–∞–Ω—ã —Å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º?"
    ],
    "–∫–∏–Ω–æ_–∫–Ω–∏–≥–∏": [
        "–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º –∏–ª–∏ –∫–Ω–∏–≥–∞?",
        "–ê –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç? –ß—Ç–æ —Ç–µ–±—è –≤ –Ω–µ–º –ø—Ä–∏–≤–ª–µ–∫–ª–æ?",
        "–ß–∞—Å—Ç–æ —á–∏—Ç–∞–µ—à—å/—Å–º–∞—Ç—Ä–∏—à—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ?"
    ],
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": [
        "–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö?",
        "–ê –∫–∞–∫–∏–º–∏ –≥–∞–¥–∂–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑—É–µ—à—å—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ?",
        "–ö–∞–∫ –¥—É–º–∞–µ—à—å, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±–æ–ª—å—à–µ –ø–æ–º–æ–≥–∞—é—Ç –∏–ª–∏ –º–µ—à–∞—é—Ç?"
    ]
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
GET_NAME, MAIN_MENU, CHATTING, JOKE, CHOOSE_CATEGORY, VIEW_PRODUCTS, CONFIRM_ORDER = range(7)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    context.user_data["cart"] = []
    context.user_data["cart_total"] = 0
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç) –ú–µ–Ω—è –∑–æ–≤—É—Ç –†–æ–Ω–∞–ª—å–¥ –∏ —è —è–≤–ª—è—é—Å—å –±–æ—Ç–æ–º –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–æ–≤.\n"
        "–ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
    )
    return GET_NAME

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_name = update.message.text
    context.user_data["user_name"] = user_name
    context.user_data["conversation_state"] = {"topic": None, "step": 0}
    
    await update.message.reply_text(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}!\n\n"
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π:\n"
        "1. –ú–æ–≥—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π\n"
        "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n"
        "3. –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏\n\n"
        "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?"
    )
    return MAIN_MENU

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
def detect_intent(message):
    message_lower = message.lower()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤", "–¥–æ–±—Ä", "—Ö–∞–π", "–∫—É"]):
        return "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
    elif any(word in message_lower for word in ["–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å", "–ø–æ–±–æ–ª—Ç–∞—Ç—å", "–æ–±—â–µ–Ω–∏–µ", "1"]):
        return "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å"
    elif any(word in message_lower for word in ["—à—É—Ç–∫", "—é–º–æ—Ä", "—Å–º–µ—Ö", "2"]):
        return "—à—É—Ç–∫–∞"
    elif any(word in message_lower for word in ["–∫–∞–Ω—Ü–µ–ª—è—Ä", "—Ç–æ–≤–∞—Ä", "–ø–æ–∫—É–ø", "—Ä—É—á–∫", "—Ç–µ—Ç—Ä–∞–¥", "–∫–∞—Ä–∞–Ω–¥–∞—à", "3"]):
        return "–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è"
    elif any(word in message_lower for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω", "–∫–æ–Ω–µ—Ü", "–∑–∞–∫–æ–Ω—á–∏"]):
        return "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"
    elif any(word in message_lower for word in ["–¥–∞", "–µ—â–µ", "–µ—â—ë", "—Ö–æ—á—É", "–∫–æ–Ω–µ—á–Ω–æ"]):
        return "–¥–∞"
    elif any(word in message_lower for word in ["–Ω–µ—Ç", "–Ω–µ", "—Ö–≤–∞—Ç–∏—Ç", "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"]):
        return "–Ω–µ—Ç"
    elif any(word in message_lower for word in ["—Ä–∞–±–æ—Ç", "—É—á–µ–±", "–æ—Ñ–∏c", "–∫–æ–ª–ª–µ–≥"]):
        return "—Ä–∞–±–æ—Ç–∞_—É—á–µ–±–∞"
    elif any(word in message_lower for word in ["—Ö–æ–±–±–∏", "—É–≤–ª–µ—á–µ–Ω", "—Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", "–æ—Ç–¥—ã—Ö"]):
        return "—Ö–æ–±–±–∏"
    elif any(word in message_lower for word in ["—Ñ–∏–ª—å–º", "–∫–∏–Ω–æ", "–∫–Ω–∏–≥", "—Å–µ—Ä–∏–∞–ª"]):
        return "–∫–∏–Ω–æ_–∫–Ω–∏–≥–∏"
    elif any(word in message_lower for word in ["—Ç–µ—Ö–Ω–æ–ª–æ–≥", "–≥–∞–¥–∂–µ—Ç", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω"]):
        return "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
    elif any(word in message_lower for word in ["–Ω–∞–∑–∞–¥", "–≤–µ—Ä–Ω—É—Ç—å—Å—è"]):
        return "–Ω–∞–∑–∞–¥"
    
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
def update_cart(context, product, operation="add"):
    cart = context.user_data.get("cart", [])
    cart_total = context.user_data.get("cart_total", 0)
    
    if operation == "add":
        cart.append(product)
        cart_total += product["price"]
    elif operation == "remove":
        if product in cart:
            cart.remove(product)
            cart_total -= product["price"]
    
    context.user_data["cart"] = cart
    context.user_data["cart_total"] = cart_total
    return cart_total

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = context.user_data.get("user_name", "")
    
    categories_text = (
        f"–•–æ—Ä–æ—à–æ, {user_name}, –ø–æ—Å–º–æ—Ç—Ä–∏, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å:\n\n"
        "1. ‚úèÔ∏è –ö–∞—Ä–∞–Ω–¥–∞—à–∏, —Ä—É—á–∫–∏ –∏ –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏\n"
        "2. üé® –î–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞\n" 
        "3. üìì –ë—É–º–∞–≥–∞, —Ç–µ—Ç—Ä–∞–¥–∏ –∏ –±–ª–æ–∫–Ω–æ—Ç—ã\n"
        "4. üìé –ò–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )
    
    await update.message.reply_text(categories_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 1
async def show_category1_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products_text = (
        "‚úèÔ∏è –ö–∞—Ä–∞–Ω–¥–∞—à–∏, —Ä—É—á–∫–∏ –∏ –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏:\n\n"
        "1. –°–∏–Ω—è—è/—á–µ—Ä–Ω–∞—è –≥–µ–ª–µ–≤–∞—è —Ä—É—á–∫–∞ - 15 —Ä—É–±.\n"
        "2. –ù–∞–±–æ—Ä –≥–µ–ª–µ–≤—ã—Ö —Ä—É—á–µ–∫ - 120 —Ä—É–±.\n"
        "3. –°–∏–Ω—è—è/—á–µ—Ä–Ω–∞—è —à–∞—Ä–∏–∫–æ–≤–∞—è —Ä—É—á–∫–∞ - 10 —Ä—É–±.\n"
        "4. –ù–∞–±–æ—Ä —à–∞—Ä–∏–∫–æ–≤—ã—Ö —Ä—É—á–µ–∫ - 80 —Ä—É–±.\n"
        "5. –ù–∞–±–æ—Ä —Ü–≤–µ—Ç–Ω—ã—Ö —Ä—É—á–µ–∫ - 150 —Ä—É–±.\n"
        "6. –ü—Ä–æ—Å—Ç–æ–π –∫–∞—Ä–∞–Ω–¥–∞—à - 5 —Ä—É–±.\n"
        "7. –ù–∞–±–æ—Ä —Ü–≤–µ—Ç–Ω—ã—Ö –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π - 200 —Ä—É–±.\n"
        "8. –ù–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã–¥–µ–ª–∏—Ç–µ–ª–µ–π - 90 —Ä—É–±.\n"
        "9. –õ–∞—Å—Ç–∏–∫ - 8 —Ä—É–±.\n"
        "10. –¢–æ—á–∏–ª–∫–∞ - 12 —Ä—É–±.\n\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:"
    )
    
    
    # await update.message.reply_photo(photo=open('images/category1_1.jpg', 'rb'), caption="–°–∏–Ω—è—è/—á–µ—Ä–Ω–∞—è –≥–µ–ª–µ–≤–∞—è —Ä—É—á–∫–∞")
    # ... –∏ —Ç–∞–∫ –¥–ª—è –≤—Å–µ—Ö 10 —Ç–æ–≤–∞—Ä–æ–≤
    
    await update.message.reply_text(products_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 2
async def show_category2_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products_text = (
        "üé® –î–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞:\n\n"
        "1. –ê–∫–≤–∞—Ä–µ–ª—å - 180 —Ä—É–±.\n"
        "2. –ì—É–∞—à—å - 220 —Ä—É–±.\n"
        "3. –ù–∞–±–æ—Ä –∫–∏—Å—Ç–æ—á–µ–∫ - 150 —Ä—É–±.\n"
        "4. –ü–∞–ª–∏—Ç—Ä–∞ - 25 —Ä—É–±.\n\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:"
    )
    
    # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ñ–æ—Ç–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ)
    await update.message.reply_text(products_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 3
async def show_category3_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products_text = (
        "üìì –ë—É–º–∞–≥–∞, —Ç–µ—Ç—Ä–∞–¥–∏ –∏ –±–ª–æ–∫–Ω–æ—Ç—ã:\n\n"
        "1. –¢–µ—Ç—Ä–∞–¥—å –≤ –∫–ª–µ—Ç–∫—É - 50 —Ä—É–±.\n"
        "2. –¢–µ—Ç—Ä–∞–¥—å –≤ –ª–∏–Ω–µ–π–∫—É - 50 —Ä—É–±.\n"
        "3. –¢–µ—Ç—Ä–∞–¥—å –Ω–∞ –∫–æ–ª—å—Ü–∞—Ö - 120 —Ä—É–±.\n"
        "4. –ë–ª–æ–∫–Ω–æ—Ç - 80 —Ä—É–±.\n"
        "5. –ë—É–º–∞–≥–∞ –±–µ–ª–∞—è –ê4 - 180 —Ä—É–±.\n"
        "6. –ë—É–º–∞–≥–∞ —Ü–≤–µ—Ç–Ω–∞—è - 95 —Ä—É–±.\n"
        "7. –ö–∞—Ä—Ç–æ–Ω - 60 —Ä—É–±.\n\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:"
    )
    
    # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ñ–æ—Ç–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ)
    await update.message.reply_text(products_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 4
async def show_category4_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products_text = (
        "üìé –ò–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã:\n\n"
        "1. –ö–æ—Ä—Ä–µ–∫—Ç–æ—Ä - 35 —Ä—É–±.\n"
        "2. –°–∫–æ—Ç—á - 25 —Ä—É–±.\n"
        "3. –õ–∏–Ω–µ–π–∫–∞ - 15 —Ä—É–±.\n"
        "4. –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä - 20 —Ä—É–±.\n"
        "5. –¶–∏—Ä–∫—É–ª—å - 45 —Ä—É–±.\n"
        "6. –ö–ª–µ–π - 30 —Ä—É–±.\n\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:"
    )
    
    # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ñ–æ—Ç–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ)
    await update.message.reply_text(products_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE, category_key: str, product_key: str):
    category = product_categories.get(category_key)
    if not category:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    product = category["products"].get(product_key)
    if not product:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart_total = update_cart(context, product, "add")
    
    await update.message.reply_text(
        f"–¢–æ–≤–∞—Ä '{product['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        f"–ö–æ—Ä–∑–∏–Ω–∞: {cart_total} —Ä—É–±."
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–æ–º—É –∂–µ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
    if category_key == "1":
        await show_category1_products(update, context)
    elif category_key == "2":
        await show_category2_products(update, context)
    elif category_key == "3":
        await show_category3_products(update, context)
    elif category_key == "4":
        await show_category4_products(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_message = update.message.text
    user_name = context.user_data.get("user_name", "")
    
    intent = detect_intent(user_message)
    
    if intent == "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å":
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        topic = random.choice(list(conversation_flows.keys()))
        context.user_data["conversation_state"] = {"topic": topic, "step": 0}
        
        greeting = random.choice(dialogues["GREETING"])
        first_question = conversation_flows[topic][0]
        
        await update.message.reply_text(
            f"{greeting}\n\n"
            f"{first_question}\n\n"
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–ø–∏—à–∏ '–î–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º'."
        )
        return CHATTING
        
    elif intent == "—à—É—Ç–∫–∞":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —à—É—Ç–æ–∫
        context.user_data["used_jokes"] = []
        context.user_data["all_jokes"] = jokes.copy()
        
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –ø–æ–ø—Ä–æ–±—É—é –ø–æ–¥–Ω—è—Ç—å —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)")
        await tell_joke(update, context)
        return JOKE
        
    elif intent == "–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è":
        await show_categories(update, context)
        return CHOOSE_CATEGORY
        
    else:
        await update.message.reply_text(
            f"{user_name}, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π:\n"
            "1. –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å\n"
            "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n"
            "3. –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏"
        )
        return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def choose_category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_message = update.message.text.strip()
    
    if user_message == "1":
        context.user_data["current_category"] = "1"
        await show_category1_products(update, context)
        return VIEW_PRODUCTS
    elif user_message == "2":
        context.user_data["current_category"] = "2"
        await show_category2_products(update, context)
        return VIEW_PRODUCTS
    elif user_message == "3":
        context.user_data["current_category"] = "3"
        await show_category3_products(update, context)
        return VIEW_PRODUCTS
    elif user_message == "4":
        context.user_data["current_category"] = "4"
        await show_category4_products(update, context)
        return VIEW_PRODUCTS
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç 1 –¥–æ 4:")
        return CHOOSE_CATEGORY

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
async def view_products_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_message = update.message.text.strip().lower()
    current_category = context.user_data.get("current_category")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–Ω–∞–∑–∞–¥"
    if user_message in ["–Ω–∞–∑–∞–¥", "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"]:
        await show_categories(update, context)
        return CHOOSE_CATEGORY
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    try:
        product_number = int(user_message)
        await add_to_cart(update, context, current_category, str(product_number))
        return VIEW_PRODUCTS
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–∞–∑–∞–¥':")
        return VIEW_PRODUCTS

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–∞ —à—É—Ç–∫–∏
async def tell_joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    used_jokes = context.user_data.get("used_jokes", [])
    all_jokes = context.user_data.get("all_jokes", [])
    
    # –ù–∞—Ö–æ–¥–∏–º —à—É—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å
    available_jokes = [j for j in all_jokes if j not in used_jokes]
    
    if available_jokes:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        joke = random.choice(available_jokes)
        used_jokes.append(joke)
        context.user_data["used_jokes"] = used_jokes
        
        await update.message.reply_text(joke)
        await update.message.reply_text("–•–æ—á–µ—à—å –µ—â–µ?)")
    else:
        # –í—Å–µ —à—É—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        await update.message.reply_text("–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —à—É—Ç–∫–∏ üò¢")
        await update.message.reply_text(
            "–ß—Ç–æ –µ—â—ë —Ö–æ—á–µ—à—å?\n"
            "1. –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å\n"
            "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n" 
            "3. –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏"
        )
        return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à—É—Ç–æ–∫
async def joke_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_message = update.message.text.lower()
    user_name = context.user_data.get("user_name", "")
    
    intent = detect_intent(user_message)
    
    if intent == "–¥–∞":
        await tell_joke(update, context)
        return JOKE
    elif intent == "–Ω–µ—Ç":
        await update.message.reply_text("–ù–∞–¥–µ—é—Å—å —è –ø–æ–¥–Ω—è–ª —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ) ")
        await update.message.reply_text(
            "–ß—Ç–æ –µ—â—ë —Ö–æ—á–µ—à—å?\n"
            "1. –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å\n"
            "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n" 
            "3. –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏"
        )
        return MAIN_MENU
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª, —Ö–æ—á–µ—à—å –µ—â–µ —à—É—Ç–∫—É? (–¥–∞/–Ω–µ—Ç)")
        return JOKE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–Ω–∏—è
async def chatting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_message = update.message.text
    user_name = context.user_data.get("user_name", "")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    if user_message.lower() == "–¥–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º":
        farewell = random.choice(dialogues["ENDING"])
        await update.message.reply_text(
            f"{farewell}\n\n"
            "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å —Ç–µ–ø–µ—Ä—å?\n"
            "1. –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å\n"
            "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n"
            "3. –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏"
        )
        return MAIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    state = context.user_data.get("conversation_state", {"topic": None, "step": 0})
    topic = state["topic"]
    step = state["step"]
    
    # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é
    if not topic:
        topic = random.choice(list(conversation_flows.keys()))
        state["topic"] = topic
        state["step"] = 0
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_intent = detect_intent(user_message)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Ç–µ–º—É
    if user_intent and user_intent in conversation_flows:
        topic = user_intent
        state["topic"] = topic
        state["step"] = 0
        response = conversation_flows[topic][0]
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
    else:
        step += 1
        state["step"] = step
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–º–µ
        if step < len(conversation_flows[topic]):
            response = conversation_flows[topic][step]
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–º—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–π
            response = random.choice(dialogues["CONTEXT_REACTIONS"])
            
            # –ò–Ω–æ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            if random.random() < 0.3:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–æ–≤–∞—Ä
                category_key = random.choice(list(product_categories.keys()))
                category = product_categories[category_key]
                product_key = random.choice(list(category["products"].keys()))
                product = category["products"][product_key]
                response += f" –ö—Å—Ç–∞—Ç–∏, –¥–ª—è {topic.replace('_', ' ')} –º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è {product['name']}!"
            
            # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
            new_topic = random.choice([t for t in conversation_flows.keys() if t != topic])
            state["topic"] = new_topic
            state["step"] = 0
            response += f"\n\n{conversation_flows[new_topic][0]}"
    
    context.user_data["conversation_state"] = state
    await update.message.reply_text(response)
    return CHATTING

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_name = context.user_data.get("user_name", "")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    cart_total = context.user_data.get("cart_total", 0)
    if cart_total > 0:
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞ —Å—É–º–º—É {cart_total} —Ä—É–±.! "
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
        )
    
    await update.message.reply_text(f"–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ, {user_name}! –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äî –ø–∏—à–∏!")
    return ConversationHandler.END

def main():
    application = Application.builder().token("8246619082:AAH2r5PFRDeNRCGfgOFPEFzD0a5bApy7EgU").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            CHATTING: [MessageHandler(filters.TEXT & ~filters.COMMAND, chatting)],
            JOKE: [MessageHandler(filters.TEXT & ~filters.COMMAND, joke_handler)],
            CHOOSE_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_category_handler)],
            VIEW_PRODUCTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, view_products_handler)],
        },
        fallbacks=[CommandHandler("end", end_conversation)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()