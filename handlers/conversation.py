import random
import logging
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from config import GET_NAME, MAIN_MENU, CHATTING, JOKE, CHOOSE_CATEGORY
from utils.helpers import (
    contains_blacklisted_words, 
    extract_name_from_text, 
    detect_intent,
    get_chat_response
)
from utils.validation import handle_cart_commands
from data.content import JOKES

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if "cart" not in context.user_data:
        context.user_data["cart"] = []
        context.user_data["cart_total"] = 0
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –†–æ–Ω–∞–ª—å–¥ –∏ —è —è–≤–ª—è—é—Å—å –±–æ—Ç–æ–º –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–æ–≤.\n"
        "–ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
    )
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text.strip()
    
    if contains_blacklisted_words(user_input):
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–∫–æ–µ –∏–º—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –µ—â–µ —Ä–∞–∑ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º."
        )
        return GET_NAME
    
    user_name = extract_name_from_text(user_input)
    
    if not user_name:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤–∞—à–µ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –µ—â–µ —Ä–∞–∑ "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ê–ª–µ–∫—Å–µ–π' –∏–ª–∏ '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π'):"
        )
        return GET_NAME
    
    context.user_data["user_name"] = user_name
    context.user_data["conversation_history"] = []
    
    await update.message.reply_text(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}! üòä\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "1. –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π –ø–æ –¥—É—à–∞–º\n"
        "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–º–µ—à–Ω—É—é —à—É—Ç–∫—É\n"
        "3. –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏\n\n"
        "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏!"
    )
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_message = update.message.text
    user_name = context.user_data.get("user_name", "")
    
    if contains_blacklisted_words(user_message):
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ–±—â–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∞–∫–∏—Ö —Å–ª–æ–≤. "
            "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–º!"
        )
        return MAIN_MENU
    
    cart_state = await handle_cart_commands(update, context, MAIN_MENU)
    if cart_state is not None:
        return cart_state
    
    intent = detect_intent(user_message)
    
    if intent == "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å":
        context.user_data["conversation_history"] = []
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è! –ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –æ —á–µ–º —É–≥–æ–¥–Ω–æ - "
            "–æ —Å–≤–æ–µ–º –¥–Ω–µ, –ø–ª–∞–Ω–∞—Ö, –º—ã—Å–ª—è—Ö, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å! üòä\n\n"
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–ø–∏—à–∏ '–¥–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º'."
        )
        return CHATTING
        
    elif intent == "—à—É—Ç–∫–∞":
        context.user_data["used_jokes"] = []
        context.user_data["all_jokes"] = JOKES.copy()
        
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –ø–æ–ø—Ä–æ–±—É—é –ø–æ–¥–Ω—è—Ç—å —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòÑ")
        await tell_joke(update, context)
        return JOKE
        
    elif intent == "–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è":
        await show_categories(update, context)
        return CHOOSE_CATEGORY
        
    else:
        await update.message.reply_text(
            f"{user_name}, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π:\n"
            "1. –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å\n"
            "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n"
            "3. –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏\n\n"
            "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å '–∫–æ—Ä–∑–∏–Ω–∞' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã"
        )
        return MAIN_MENU

async def tell_joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    used_jokes = context.user_data.get("used_jokes", [])
    all_jokes = context.user_data.get("all_jokes", [])
    
    available_jokes = [j for j in all_jokes if j not in used_jokes]
    
    if available_jokes:
        joke = random.choice(available_jokes)
        used_jokes.append(joke)
        context.user_data["used_jokes"] = used_jokes
        
        await update.message.reply_text(joke)
        await update.message.reply_text("–•–æ—á–µ—à—å –µ—â–µ —à—É—Ç–∫—É? üòÑ (–¥–∞/–Ω–µ—Ç)")
    else:
        await update.message.reply_text("–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —à—É—Ç–∫–∏! üòÖ")
        await update.message.reply_text(
            "–ß—Ç–æ –µ—â—ë —Ö–æ—á–µ—à—å?\n"
            "1. –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å\n"
            "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n" 
            "3. –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏"
        )
        return MAIN_MENU

async def joke_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_message = update.message.text.lower()
    user_name = context.user_data.get("user_name", "")
    
    if contains_blacklisted_words(user_message):
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ–±—â–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∞–∫–∏—Ö —Å–ª–æ–≤. "
            "–î–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ —á–µ–º—É-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–º—É!"
        )
        await update.message.reply_text("–•–æ—á–µ—à—å –µ—â–µ —à—É—Ç–∫—É? (–¥–∞/–Ω–µ—Ç)")
        return JOKE
    
    cart_state = await handle_cart_commands(update, context, JOKE)
    if cart_state is not None:
        return cart_state
    
    if user_message == "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å":
        await update.message.reply_text(
            "–ö–æ–Ω–µ—á–Ω–æ! –®—É—Ç–∫–∏ - —ç—Ç–æ –≤–µ—Å–µ–ª–æ, –Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–∂–µ –∑–¥–æ—Ä–æ–≤–æ! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?"
        )
        return CHATTING
    
    intent = detect_intent(user_message)
    
    if intent == "–¥–∞":
        await tell_joke(update, context)
        return JOKE
    elif intent == "–Ω–µ—Ç":
        await update.message.reply_text("–ù–∞–¥–µ—é—Å—å, —è –ø–æ–¥–Ω—è–ª —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòä")
        await update.message.reply_text(
            "–ß—Ç–æ –µ—â—ë —Ö–æ—á–µ—à—å?\n"
            "1. –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å\n"
            "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n" 
            "3. –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏"
        )
        return MAIN_MENU
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª, —Ö–æ—á–µ—à—å –µ—â–µ —à—É—Ç–∫—É? (–¥–∞/–Ω–µ—Ç)")
        return JOKE

async def chatting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_message = update.message.text
    user_name = context.user_data.get("user_name", "")
    
    if contains_blacklisted_words(user_message):
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —Ç–∞–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. "
            "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ —Ö–æ—Ä–æ—à–µ–º!"
        )
        return CHATTING
    
    cart_state = await handle_cart_commands(update, context, CHATTING)
    if cart_state is not None:
        return cart_state
    
    if user_message.lower() in ["–¥–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º", "–∑–∞–∫–æ–Ω—á–∏–º", "—Ö–≤–∞—Ç–∏—Ç", "—Å—Ç–æ–ø"]:
        await update.message.reply_text(
            "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! –ù–∞–¥–µ—é—Å—å, –º—ã —Å–∫–æ—Ä–æ —Å–Ω–æ–≤–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–º! üëã\n\n"
            "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å —Ç–µ–ø–µ—Ä—å?\n"
            "1. –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å\n"
            "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n"
            "3. –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏"
        )
        return MAIN_MENU
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    response = get_chat_response(user_message, context)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    if "conversation_history" not in context.user_data:
        context.user_data["conversation_history"] = []
    
    context.user_data["conversation_history"].append({
        "user": user_message,
        "bot": response
    })
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if len(context.user_data["conversation_history"]) > 10:
        context.user_data["conversation_history"] = context.user_data["conversation_history"][-10:]
    
    await update.message.reply_text(response)
    return CHATTING

async def get_address_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    address = update.message.text
    user_name = context.user_data.get("user_name", "")
    cart_total = context.user_data.get("cart_total", 0)
    
    if contains_blacklisted_words(address):
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤ –∞–¥—Ä–µ—Å–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –µ—â–µ —Ä–∞–∑:"
        )
        from config import GET_ADDRESS
        return GET_ADDRESS
    
    cart = context.user_data.get("cart", [])
    order_details = "\n".join([f"‚Ä¢ {product['name']} - {product['price']} —Ä—É–±." for product in cart])
    
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, {user_name}! üéâ\n\n"
        f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n{order_details}\n\n"
        f"–ò—Ç–æ–≥: {cart_total} —Ä—É–±.\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n\n"
        f"–ö—É—Ä—å–µ—Ä –ø—Ä–∏–≤–µ–∑–µ—Ç –≤–∞–º –∑–∞–∫–∞–∑, –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏."
    )
    
    context.user_data["cart"] = []
    context.user_data["cart_total"] = 0
    
    await update.message.reply_text(
        "–ß—Ç–æ –µ—â—ë —Ö–æ—á–µ—à—å?\n"
        "1. –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å\n"
        "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n"
        "3. –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏"
    )
    return MAIN_MENU

async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_name = context.user_data.get("user_name", "")
    
    cart_total = context.user_data.get("cart_total", 0)
    if cart_total > 0:
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞ —Å—É–º–º—É {cart_total} —Ä—É–±.! "
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
        )
    
    await update.message.reply_text(f"–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ, {user_name}! –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äî –ø–∏—à–∏! üëã")
    return ConversationHandler.END

async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from handlers.products import show_categories as show_cats
    await show_cats(update, context)